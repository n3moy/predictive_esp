version: '3'

x-airflow-common:
  &airflow-common
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.4-python3.8}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    CONFIG_PATH_CLI: /config/cli_params.yaml
    CONFIG_PATH_PARAMS: /config/params_all.yaml
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/data
    - ./models:/models
    - ./config:/config
    - ./src:/src
  user: "${AIRFLOW_UID:-50000}:0"

services:
  minio:
    container_name: minio
    hostname: minio
    image: quay.io/minio/minio
    command: server --console-address ":9001" /data/
    expose:
        - "9000"
        - "9001"
    networks:
        - s3
    environment: 
        MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
        MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
        interval: 30s
        timeout: 20s
        retries: 3
    volumes:
        - ./Docker/minio/:/data
        
  nginx:
    image: nginx:1.23-alpine
#    restart: always
    container_name: nginx
    hostname: nginx
    volumes:
        - ./Docker/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
        - "9000:9000"
        - "9001:9001"
    networks:
        - s3
    depends_on:
        - minio
        
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_HOST_AUTH_METHOD: trust
      PGDATA: /data/postgres
    volumes:
        - postgres:/data/postgres
    ports:
        - "5432:5432"
    networks:
        - postgres
      
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
        PGADMIN_DEFAULT_EMAIL: admin@admin.com
        PGADMIN_DEFAULT_PASSWORD: root
    volumes:
        - ./Docker/pgadmin/:/var/lib/pgadmin
    ports:
        - "5050:80"
    networks:
        - postgres
        
  mlflow:
    restart: always
    image: mlflow_server
    container_name: mlflow_server
    ports:
        - "5000:5000"
    networks:
        - postgres
        - s3
#    expose:
#        - "5000"
    environment:
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
#        - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB} --default-artifact-root s3://${AWS_S3_BUCKET}/ --host 0.0.0.0
    
  airflow-init:
    <<: *airflow-common
    image: airflow-init
    container_name: airflow_init
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/data /sources/mlflow
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,data,mlflow}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME-root}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD-root}
    user: "0:0"
    volumes:
      - .:/sources

  airflow-webserver:
    <<: *airflow-common
#    build:
#      context: ./Docker/airflow-base
    image: airflow-base
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - postgres
      - s3
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    image: airflow-scheduler
    container_name: airflow_scheduler
    command: scheduler
    restart: always
    networks:
      - postgres
      - s3
    env_file:
      - .env
    
networks:
    s3:
        driver: bridge
    postgres:
        driver: bridge
        
volumes:
    postgres: